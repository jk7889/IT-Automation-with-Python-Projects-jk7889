#!/usr/bin/env python3

import json
import locale
import os
import reports
import emails


def load_data(filename):
    """Loads the contents of filename as a JSON file"""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Turns a car dictionary into a nicely formatted name"""
    return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.
       Returns a list of lines that summarize the information"""
    # Initializing variables for comparison to fnd the maximums
    max_revenue = {"revenue": 0}
    sales = {"total_sales": 0}
    top_year = {}

    for item in data:
        # Calculates the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item

        # Finds the item with the maximum sales
        if item["total_sales"] > sales["total_sales"]:
            sales = item

        # Creates a dictionary containing the sum of all sales in a given year
        # To find the year with the maximum sales
        if not item["car"]["car_year"] in top_year.keys():
            top_year[item["car"]["car_year"]] = item["total_sales"]
        else:
            top_year[item["car"]["car_year"]] += item["total_sales"]
    max_value = max(top_year.values())
    max_key = max(top_year, key=top_year.get)

    # Returns a list containing information about car with max revenue, car with max sales, year with max sales
    summary = [
        "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(format_car(sales["car"]), sales["total_sales"]),
        "The most popular year was {} with {} sales.".format(max_key, max_value),
    ]

    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists"""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def main():
    """Processes the JSON data and generates a full report out of it"""
    data = load_data("car_sales.json")
    summary = process_data(data)
    new_summary = '<br/>'.join(summary)
    print(summary)

    # Generating the car sales pdf report
    reports.generate('/outputs/cars.pdf', "Cars report", new_summary, cars_dict_to_table(data))

    # Generating the email message and sending the report
    sender = "automation@example.com"
    receiver = "{}@example.com".format(os.environ.get('USER'))
    msg = emails.generate(sender, receiver, "Sales summary for last month", new_summary, "/outputs/cars.pdf")
    emails.send(msg)


if __name__ == "__main__":
    main()
